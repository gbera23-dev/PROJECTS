/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traverse(TreeNode* root, unordered_map<int, vector<int>>& graph) {
        if(root == nullptr)return; 
        if(root->left != nullptr) {
            graph[root->val].push_back(root->left->val);
            graph[root->left->val].push_back(root->val);
        }
        if(root->right != nullptr) {
            graph[root->val].push_back(root->right->val); 
            graph[root->right->val].push_back(root->val);
        }
        traverse(root->left, graph);
        traverse(root->right, graph); 
    }

    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int, vector<int>> graph;
        traverse(root, graph); 
        queue<int> q; 
        q.push(start);
        int minutes = -1;
        unordered_set<int> infected; 
        while(q.size() != 0) {
            int currentlyInfected = -1;
            int size = q.size(); 
            infected.insert(start);
            for(int j = 0; j < size; j++) {
            currentlyInfected = q.front(); 
            q.pop(); 
            vector<int> toBeInfected = graph[currentlyInfected]; 
            for(int i = 0; i < toBeInfected.size(); i++) {
                if(infected.find(toBeInfected[i]) == infected.end()) {
                    q.push(toBeInfected[i]); 
                    infected.insert(toBeInfected[i]);
                }
            } 
            }
            minutes++;
        } 
        return minutes;
    }
};